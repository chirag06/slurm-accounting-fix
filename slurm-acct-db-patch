#!/usr/bin/env bash

while read eachline; do

     start_time=`echo $eachline | cut -d '|' -f5`
     start_time_epoch=`echo $(date +%s --date="$start_time")`
     resvcpuraw=`echo $eachline | cut -d '|' -f7`
     correct_end_time=$((start_time_epoch + resvcpuraw))
     formatted_correct_end_time=`echo $(date +%Y-%m-%dT%H:%M:%S --date="@$correct_end_time")`
     jobid=`echo $eachline | cut -d '|' -f1`

     regex='[0-9]{1,}_[0-9]{1,}\.([a-z]{1,}|[0-9]{1,})'    # Regex to find the array jobs

  if [[ $jobid =~ $regex ]]; # If it's an array job split into taskID and RawJobID
     then
       raw_job_id=`echo $jobid | cut -d '_' -f1`
       id_array_task=`echo $jobid | cut -s -d '_' -f2 | cut -d '.' -f1`
       id_step=`echo $jobid | cut -s -d '.' -f2`

          if [[ $id_step == "batch" ]] ; then
             id_step=-2
          elif [[ $id_step == "extern" ]] ; then
             id_step=-1
          fi

       echo UPDATE slurm_cluster_step_table SET st.time_end="$correct_end_time" FROM slurm_cluster_job_table as jt INNER JOIN slurm_cluster_step_table as st WHERE jt.id_array_job="$raw_job_id" \&\& jt.id_array_task="$id_array_task" \&\& st.id_step="$id_step" and jt.job_db_inx=st.job_db_inx;

       regex1='[0-9]{1,}_[0-9]{1,}'
       elif [[ $jobid =~ $regex1 ]];
        then

       raw_job_id=`echo $jobid | cut -d '_' -f1`
       id_array_task=`echo $jobid | cut -s -d '_' -f2`
       echo UPDATE slurm_cluster_job_table SET time_end="$correct_end_time" WHERE id_array_job="$raw_job_id" \&\& id_array_task="$id_array_task";
  
       echo -e "\n" # To be removed before using in prod.
  else
     echo UPDATE slurm_cluster_job_table SET time_end="$correct_end_time" WHERE id_job="$jobid";
  fi
done < "${1:-/dev/stdin}"
